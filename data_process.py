import numpy as np
import cv2
import urllib.request 
import os
import math
from PIL import Image

def gethouse(image):
    #capture image of house as rectangle
    house = np.zeros((768,768,3),dtype=np.uint8)
    U = 383
    while np.sum(image[U][300])<730 and np.sum(image[U][300])>720 and U<765:
        U = U-1
    D = 383
    while np.sum(image[D][300])<730 and np.sum(image[D][300])>720 and D<765:
        D = D+1
    L = 300
    while np.sum(image[383][L])<730 and np.sum(image[383][L])>720 and L<765:
        L = L-1
    R = 300
    while np.sum(image[383][R])<730 and np.sum(image[383][R])>720 and R<765:
        R = R+1
    house = cv2.rectangle(house,(L,U),(R,D),[255,255,255],-1)
    return house,L,R,U,D

def getsolarpanelsystem(house,L,R,U,D):
    #capture images of maximum solar installations
    w = int((1.5/30)*768)
    h = int((1/30)*768)
    if (D-U)/(R-L)>1.5:
        p1 = 0
        panel1 = np.zeros((768,768,3),dtype=np.uint8)
        for i in range(1,int((R-L)/(2*h))):
            for j in range(1,int((R-L-(2*(i+1)*w))/w)):
                left = L+((i+1)*w)
                panel1 = cv2.rectangle(panel1, (left+(j*w),U+((i+1)*h)), (left+((j+1)*w),U+(i*h)), [255,255,0], -1)
                p1 = p1+1

        p2 = 0
        panel2 = np.zeros((768,768,3),dtype=np.uint8)        
        for j in range(1,int((R-L)/(2*h))):
            for i in range(1,int((D-U-(2*(j+1)*w))/w)):
                top = U+((j+1)*w)
                panel2 = cv2.rectangle(panel2, (L+(j*h),top+((i+1)*w)), (L+((j+1)*h),top+(i*w)), [255,255,0], -1)
                p2 = p2+1

        p3 = 0
        panel3 = np.zeros((768,768,3),dtype=np.uint8)
        for i in range(1,int((R-L)/(2*h))):
            for j in range(1,int((R-L-(2*(i+1)*w))/w)):
                left = L+((i+1)*w)
                panel3 = cv2.rectangle(panel3, (left+(j*w),D-((i+1)*h)), (left+((j+1)*w),D-(i*h)), [255,255,0], -1)
                p3 = p3+1        


        p4 = 0
        panel4 = np.zeros((768,768,3),dtype=np.uint8)        
        for j in range(1,int((R-L)/(2*h))):
            for i in range(int((D-U-(2*(j+1)*w))/w)):
                top = U+((j+1)*w)
                panel4 = cv2.rectangle(panel4, (R-(j*h),top+((i+1)*w)), (R-((j+1)*h),top+(i*w)), [255,255,0], -1)
                p4 = p4+1
    else:
        p1 = 0
        panel1 = np.zeros((768,768,3),dtype=np.uint8)
        for i in range(1,int((D-U)/(2*h))):
            for j in range(1,int((R-L-(2*(i+1)*w))/w)):
                left = L+((i+1)*w)
                panel1 = cv2.rectangle(panel1, (left+(j*w),U+((i+1)*h)), (left+((j+1)*w),U+(i*h)), [255,255,0], -1)
                p1 = p1+1

        p2 = 0
        panel2 = np.zeros((768,768,3),dtype=np.uint8)        
        for j in range(1,int((R-L)/(2*h))):
            for i in range(1,int((D-U-(2*(j+1)*w))/w)):
                top = U+((j+1)*w)
                panel2 = cv2.rectangle(panel2, (L+(j*h),top+((i+1)*w)), (L+((j+1)*h),top+(i*w)), [255,255,0], -1)
                p2 = p2+1

        p3 = 0
        panel3 = np.zeros((768,768,3),dtype=np.uint8)
        for i in range(1,int((D-U)/(2*h))):
            for j in range(1,int((R-L-(2*(i+1)*w))/w)):
                left = L+((i+1)*w)
                panel3 = cv2.rectangle(panel3, (left+(j*w),D-((i+1)*h)), (left+((j+1)*w),D-(i*h)), [255,255,0], -1)
                p3 = p3+1        


        p4 = 0
        panel4 = np.zeros((768,768,3),dtype=np.uint8)        
        for j in range(1,int((R-L)/(2*h))):
            for i in range(1,int((D-U-(2*(j+1)*w))/w)):
                top = U+((j+1)*w)
                panel4 = cv2.rectangle(panel4, (R-(j*h),top+((i+1)*w)), (R-((j+1)*h),top+(i*w)), [255,255,0], -1)
                p4 = p4+1
        
    return panel1, panel2, panel3, panel4, p1,p2,p3,p4

#pictures of solar cells and number of solar cells
#panel1, panel2, panel3, panel4, p1,p2,p3,p4 = getsolarpanelsystem()

#area of each solar panel system in m^2
#area1 = p1*1.5
#area2 = p2*1.5
#area3 = p3*1.5
#area4 = p4*1.5

#total cells and total area of system m^2
#p = p1+p2+p3+p4
#area = p*1.5

#plt.imshow(cv2.addWeighted(panel1+panel2+panel3+panel4,0.1,imgclear,0.9,0))

"""## Calculate Energy"""

import pandas as pd

def getdata(lat,lon):
    #3 days forecasting of power generated by installing one 5 kwH solar panel system of 18 cells
    url1 = 'https://api.solcast.com.au/world_pv_power/forecasts?latitude='+str(lat)+'&longitude='+str(lon)+'&capacity=5&tilt=30&azimuth=30&loss_factor=0.75&install_date=2020-04-07&format=csv&api_key=mqt2SSwxBpraYfk4_XNtSz8EaqYI_s_r'
    roof1 = pd.read_csv(url1)
    url2 = 'https://api.solcast.com.au/world_pv_power/forecasts?latitude='+str(lat)+'&longitude='+str(lon)+'&capacity=5&tilt=30&azimuth=120&loss_factor=0.75&install_date=2020-04-07&format=csv&api_key=mqt2SSwxBpraYfk4_XNtSz8EaqYI_s_r'
    roof2 = pd.read_csv(url2)
    url3 = 'https://api.solcast.com.au/world_pv_power/forecasts?latitude='+str(lat)+'&longitude='+str(lon)+'&capacity=5&tilt=30&azimuth=-150&loss_factor=0.75&install_date=2020-04-07&format=csv&api_key=mqt2SSwxBpraYfk4_XNtSz8EaqYI_s_r'
    roof3 = pd.read_csv(url3)
    url4 = 'https://api.solcast.com.au/world_pv_power/forecasts?latitude='+str(lat)+'&longitude='+str(lon)+'&capacity=5&tilt=30&azimuth=-120&loss_factor=0.75&install_date=2020-04-07&format=csv&api_key=mqt2SSwxBpraYfk4_XNtSz8EaqYI_s_r'
    roof4 = pd.read_csv(url4)
    
    return roof1,roof2,roof3,roof4

#forecast data of each system
#roof1,roof2,roof3,roof4 = getdata(lat,lon)

def allroofs(p1,p2,p3,p4,roof1,roof2,roof3,roof4):
    #returns energy generated assuming no change in weather patterns, all system installed
    Eperday = 24*np.average((p1*roof1['PvEstimate'])+(p2*roof2['PvEstimate'])+(p3*roof3['PvEstimate'])+(p4*roof4['PvEstimate']))/18
    Epermonth = 30*Eperday
    Eperyear = 365*Eperday
    
    return Eperday, Epermonth, Eperyear

#Eperday, Epermonth, Eperyear =  allroofs()

import operator

def oneroof(p1,p2,p3,p4,roof1,roof2,roof3,roof4):
    #returns energy generated assuming no change in weather patterns, best system installed
    my_list = [np.average(p1*roof1['PvEstimate']),np.average(p2*roof2['PvEstimate']),np.average(p3*roof3['PvEstimate']),np.average(p4*roof4['PvEstimate'])]
    index, p = max(enumerate(my_list), key=operator.itemgetter(1))

    E1perday = 24*(p/18)
    E1permonth = 30*E1perday
    E1peryear = 365*E1perday

    return index+1, E1perday, E1permonth, E1peryear

#bestroof_index, E1perday, E1permonth, E1peryear =  oneroof()